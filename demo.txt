Solution Design Document: Paycorp Bank Account Linking UI Experience
1. Introduction
1.1. Purpose and Scope
This Solution Design Document (SDD) meticulously details the architectural and design specifications for Paycorp's new in-house bank account linking user interface (UI). The fundamental objective is to transition from the previously utilized Mastercard Finicity Connect experience to a custom-hosted solution. This strategic shift will leverage Mastercard/Finicity APIs and the Connect Components Web SDK to power core functionalities, including financial institution (FI) login and OAuth redirects.

The comprehensive scope of this document encompasses the end-to-end user journey, critical UI/UX design considerations, the overarching technical architecture, detailed API integration strategies, robust security measures, adherence to ADA compliance standards, and intricate sequence diagrams illustrating various authentication flows. The decision to move from a fully hosted third-party UI to a hybrid model, where Paycorp controls the frontend experience, represents a deliberate strategic choice. This transition is not merely a technical migration; it is a business imperative aimed at gaining enhanced control over the user journey, ensuring consistent brand representation, and facilitating deeper integration with Paycorp's proprietary platform services. By owning the UI, Paycorp can refine its offering, optimize user conversion funnels, and respond with greater agility to evolving market demands and user feedback, thereby reducing its reliance on the inherent limitations of Finicity's pre-built UI.   

1.2. Current State Analysis (Transition from Finicity Connect)
Previously, Paycorp relied entirely on the comprehensive Mastercard Finicity Connect experience. While this pre-built UI for bank account linking offered the convenience of rapid deployment, it inherently restricted Paycorp's ability to customize the user journey, align with specific brand guidelines, and integrate seamlessly with its distinct platform features. The current transition is designed to directly address these limitations by enabling a fully branded and controlled user experience. Finicity's own documentation implicitly supports this direction by highlighting the flexibility of "Connect Lite" for clients who require "highly customized" experiences, which aligns precisely with Paycorp's strategic objective to tailor the user interaction.   

1.3. Proposed Solution Overview
The proposed solution involves the development of a sophisticated client-side application, built using React and TypeScript, which will be hosted and managed by Paycorp. This UI is specifically engineered to be embedded within a merchant's iframe, providing a cohesive and integrated experience. This Paycorp UI will orchestrate the entire bank account linking process, interacting with Finicity APIs for core functionalities such as financial institution search and the secure retrieval of account data. A critical aspect of this solution is its utilization of the Mastercard Connect Components Web SDK. This SDK will be instrumental in dynamically rendering institution-specific login forms for legacy bank connections and in managing the complex OAuth redirection flows, thereby ensuring seamless integration with Finicity's underlying payment aggregation capabilities. Furthermore, to maximize coverage and user choice, a manual account linking option will be fully supported, encompassing both instant connect and micro-deposit verification methods.

1.4. Key Objectives and Success Criteria
The development of this solution is guided by a set of clear objectives and measurable success criteria:

Objectives:

To deliver a seamless, intuitive, and secure bank account linking experience that is fully aligned with Paycorp's established brand identity.

To achieve comprehensive compliance with Web Content Accessibility Guidelines (WCAG) 2.1 Level AA standards, ensuring the experience is inclusive and accessible to all users.

To establish a robust, reliable, and high-performing integration with Mastercard/Finicity APIs and the Connect Components Web SDK.

To significantly enhance user trust and overall satisfaction throughout the entire account linking process.

Success Criteria:

The successful account linking completion rate must exceed a predefined benchmark, for example, greater than X%.

The solution must demonstrate zero critical or high-severity accessibility findings upon WCAG 2.1 Level AA audits.

API integration error rates must remain below a specified threshold, such as less than 0.5%, with average response times for non-MFA flows consistently within acceptable limits, for instance, under 500ms.

The project will be deemed successful if it garners positive qualitative feedback from user acceptance testing and post-launch user surveys, specifically regarding ease of use, clarity of information, and perceived security.

2. Overall System Architecture
2.1. High-Level Architecture Diagram
The overall architecture for the Paycorp Bank Account Linking UI experience is meticulously designed to ensure modularity, scalability, security, and maintainability. The system components and their interactions are structured to facilitate a smooth and secure flow of information and control.

Components:

Merchant UI: This represents the external web application where the end-user initiates the payment by bank. It will serve as the host environment, embedding the Paycorp Account Linking UI within an iframe.

Paycorp Account Linking UI (Frontend): This is the client-side application, robustly built with React and TypeScript. Its primary role is to render all user-facing screens, manage the intricate user flow state, and directly integrate with the Mastercard Connect Components Web SDK. This integration is crucial for rendering dynamic, bank-specific authentication experiences. The frontend will communicate securely with the Paycorp Backend Services for all sensitive operations and data orchestration.

Paycorp Backend Services (API Gateway/Orchestration Layer): This is a critical intermediary layer, central to the system's security and functionality. It is responsible for securely handling all interactions with external Mastercard/Finicity APIs. This layer will manage API key authentication, token lifecycles, intelligent request proxying, and the processing of sensitive callbacks received from Finicity. By centralizing the business logic related to account linking, this backend ensures that no sensitive Finicity credentials are ever exposed to the client-side, thereby significantly minimizing security risks. The establishment of this Paycorp Backend as a dedicated security and orchestration hub is not merely a design preference but a foundational security requirement. Finicity API authentication necessitates the use of sensitive credentials such as    

partnerId, partnerSecret, and Finicity-App-Key. Direct exposure of these credentials within a client-side (React) application, even with obfuscation, would constitute a severe security vulnerability. Therefore, the backend acts as a secure proxy, centralizing authentication, diligently managing API key lifecycles, and enabling robust logging and rate limiting. This architecture significantly reduces the attack surface and adheres to industry best practices for handling sensitive financial data.   

Mastercard/Finicity APIs: These are the external RESTful APIs provided by Finicity, a Mastercard company. They offer essential functionalities such as partner authentication, comprehensive financial institution search, the generation of Connect URLs for various authentication flows (both legacy and OAuth), and the secure retrieval of account data once linking is complete.   

Mastercard Connect Components Web SDK: This is a JavaScript SDK provided by Mastercard Open Banking. It will be seamlessly embedded within the Paycorp Account Linking UI (the React application) to dynamically render institution-specific login forms for legacy bank connections. It also provides mechanisms for event handling during the authentication process. For OAuth flows, the UI will receive a redirect URL from the backend and perform a direct browser redirect.    

2.2. Component Breakdown
To ensure clarity and modularity, the system is broken down into distinct components with specific responsibilities:

Paycorp Account Linking UI (Frontend):

Technology: This component will be developed using React (leveraging its latest stable version) and TypeScript, ensuring type safety and maintainability. Modern CSS-in-JS solutions or SCSS will be employed for styling, and Webpack or Vite will be used for efficient bundling.

Responsibilities: The frontend is primarily responsible for rendering the user interface, managing application state (potentially using React Context or Redux for global state management), handling all user input, integrating directly with the Mastercard Connect Components Web SDK's custom elements, and maintaining secure communication with the Paycorp Backend Services.

Key Modules: The frontend will comprise several key modules, including a Welcome/Privacy Screen, an FI Search & Selection module, a dedicated Legacy Login Wrapper (utilizing <mastercard-form> and <mastercard-input>), an OAuth Redirect Handler, an Account Selection module, forms for Manual Connect, and a robust Error Display system.

Paycorp Backend Services:

Architecture: The backend will be designed as a set of RESTful microservices, promoting independent deployment, scalability, and resilience.

Key Services:

Finicity Integration Service: This service will encapsulate all direct API calls to Finicity, including authentication, financial institution search (instructions API), generating login form data (/login-forms API), generating OAuth redirect URLs (Generate V2 Connect URL API), and the secure retrieval of account data. It will also diligently manage the Finicity API token lifecycle.

Account Linking Service: This service will manage the intricate state of the account linking process, securely store linked account metadata (ensuring no sensitive credentials are retained), and orchestrate the overall flow of the user journey.

Security Service: This critical service will handle the centralized management of API keys and secrets, potentially integrating with a dedicated secrets management solution to enhance security posture.

Notification Service: This service will be responsible for sending timely notifications to users, particularly for asynchronous processes such as micro-deposit verification.

Data Storage: A secure relational database, such as PostgreSQL, will be used for storing structured data like non-sensitive linked account metadata, user session information, and comprehensive audit logs. Consideration may also be given to NoSQL databases (e.g., MongoDB) for logging or less structured data. It is a fundamental principle that no raw bank login credentials will ever be stored by Paycorp.

2.3. Technology Stack
The chosen technology stack reflects a commitment to modern, scalable, and secure development practices suitable for a high-stakes Fintech environment:

Frontend: React (latest stable version), TypeScript for robust type checking, modern CSS-in-JS or SCSS for styling flexibility, and Webpack/Vite for efficient module bundling and development server capabilities.

Backend: A robust server-side language and framework will be selected, such as Node.js with Express/NestJS, Java with Spring Boot, or Python with FastAPI/Django REST Framework. The choice will prioritize high-performance API services, crucial for Fintech operations.

Database: A relational database, such as PostgreSQL, will be the primary choice for structured data storage, including non-sensitive linked account metadata and user session information. Depending on logging and analytics needs, a NoSQL database like MongoDB might be considered for less structured data.

Containerization: Docker will be utilized to ensure consistent development, testing, and deployment environments, encapsulating applications and their dependencies.

Orchestration: Kubernetes will be employed for managing containerized applications in production, guaranteeing scalability, high availability, and automated deployments.

Cloud Provider: A major cloud provider such as AWS, Azure, or GCP will be selected, leveraging their managed services for databases, message queues, and advanced security features.

2.4. API Integration Strategy (Finicity API Authentication & Token Management)
The integration with Finicity APIs is a cornerstone of this solution, requiring a meticulous approach to authentication and token management.

Finicity Partner Authentication: The Paycorp Backend will initiate a POST /aggregation/v2/partners/authentication call to Finicity. This request will securely transmit Paycorp's partnerId and partnerSecret. In response, Finicity will issue a    

Finicity-App-Token, which remains valid for two hours and is an indispensable requirement for all subsequent Finicity API calls.   


A critical best practice for the Paycorp Backend will be the implementation of a sophisticated token caching mechanism. This system will securely store the Finicity-App-Token along with its generation timestamp. Before any Finicity API call is dispatched, the system will proactively assess the token's age. If the token is found to be older than 90 minutes, a new one will be generated immediately. This proactive refresh strategy ensures that a fresh, valid token is always used for each request, thereby significantly minimizing the risk of API call failures due to token expiration. The importance of this proactive token management for maintaining user experience continuity cannot be overstated. The Finicity API documentation explicitly states the two-hour validity period for the    

Finicity-App-Token but recommends generating a new one if it's older than 90 minutes. This is not merely a suggestion for API efficiency; it is a critical requirement for preventing interruptions in the user journey. If a user is engaged in a multi-step linking process that extends beyond this 90-minute proactive refresh window, and the backend attempts to use an older token, the API call will inevitably fail. Such failures directly lead to frustrating user errors, potential abandonment of the linking process, and a degraded overall experience. Therefore, the Paycorp Backend must implement robust, proactive token refresh logic—perhaps as a background job or a "check-then-refresh" wrapper around all Finicity API calls—to guarantee that the token is consistently valid, thus preventing unexpected interruptions in the user flow.   

API Calls from Backend: All interactions with Finicity APIs, including institution search, login form data retrieval, OAuth redirect URL generation, and the retrieval of account data, will be exclusively proxied through the Paycorp Backend. The Finicity-App-Key and the currently active Finicity-App-Token will be securely included in the HTTP headers for every request.   

Login Form Data Retrieval: For legacy login flows, the Paycorp Backend will call the POST /connect-components/institutions/{institution_id}/login-forms API. This API will return a JSON response containing the id, eventStreamId, and an array of elements (e.g., username, password fields) that the Paycorp UI will use to render the <mastercard-form> and <mastercard-input> custom elements.    

OAuth URL Generation: For OAuth connections, the Paycorp Backend will call the appropriate Finicity API (e.g., Generate V2 Connect URL for OAuth) to obtain the specific redirectUrl that the Paycorp UI will use to initiate the OAuth flow.    

2.5. Security Architecture (API Security, Sensitive Data Handling, Iframe Security Best Practices)
Security is paramount in a Fintech environment, especially when handling sensitive financial data and integrating with third-party APIs. A multi-layered security architecture will be implemented.

API Security (Paycorp Backend):

Authentication & Authorization: Robust authentication and authorization mechanisms will be implemented for Paycorp's internal APIs, ideally utilizing OAuth 2.0 and OpenID Connect for both user and service-to-service authentication.   

Rate Limiting & Throttling: All API endpoints will be protected by rate limiting to prevent abuse, mitigate brute-force attacks, and avoid accidental overloading, thereby safeguarding system performance and security.   

Input Validation: Strict validation and sanitization of all incoming data will be enforced at both the API gateway and individual service levels to prevent common vulnerabilities such as injection attacks.

Secrets Management: All sensitive credentials, including Finicity partnerId, partnerSecret, and Finicity-App-Key, will be stored securely using dedicated secrets management solutions (e.g., AWS Secrets Manager, HashiCorp Vault, Kubernetes Secrets with encryption). These credentials will never be hardcoded in source code or committed to code repositories.   

Monitoring & Logging: Comprehensive, real-time monitoring and logging of all API traffic and system activities will be implemented. This enables the detection of unusual patterns, unauthorized usage attempts, and potential security threats.   

Periodic Rotation: A strict policy for periodic rotation of all API keys and secrets will be enforced to minimize the window of opportunity for compromise.   

Least Privilege Access: The principle of least privilege will be rigorously applied to all system components and human users, ensuring that only the absolute minimum necessary access rights are granted.   

Sensitive Data Handling:

Encryption: All sensitive financial data and Personally Identifiable Information (PII) will be encrypted both in transit (using HTTPS/TLS 1.2 or higher for all communications, as explicitly required by Finicity ) and at rest (using industry-standard AES-256 encryption for databases and storage).   

Tokenization/Obfuscation: Where technically feasible and beneficial, sensitive data within API responses (e.g., full account numbers) will be tokenized or obfuscated before being exposed, even internally, to minimize the impact of potential data breaches.   

Data Minimization: Adherence to data minimization principles is crucial, meaning only the data absolutely necessary for the intended purpose will be collected and stored.

Iframe Security Best Practices: Given that the Paycorp UI is designed to be embedded within a merchant's iframe, specific and stringent security measures are critical to prevent common iframe-related vulnerabilities such as clickjacking and data leakage.   

sandbox attribute: The iframe embedding the Paycorp UI will extensively utilize the sandbox attribute to impose a set of restrictions and prohibit elements that could pose a security risk. A carefully configured sandbox attribute, such as sandbox="allow-scripts allow-forms allow-popups allow-same-origin", will explicitly permit only the necessary functionalities while blocking others by default.   

allow attribute: Only explicitly required browser features will be safelisted for the iframe via the allow attribute (e.g., allow="clipboard-write" if copy-paste functionality is genuinely needed). Granting unnecessary permissions will be strictly avoided.   

referrerpolicy attribute: This attribute will be set to no-referrer or same-origin on the iframe to precisely control what referrer information is sent with requests originating from within the iframe.   

X-Frame-Options HTTP header: The Paycorp UI server will send the X-Frame-Options: same-origin HTTP header. This header is vital for preventing the Paycorp UI from being rendered in cross-origin iframes, unless explicitly allowed for a list of trusted merchants. The merchant's server embedding the iframe must also be appropriately configured to permit the Paycorp domain.   

Content-Security-Policy (CSP): A strict Content Security Policy (CSP) will be implemented for the Paycorp UI to significantly mitigate data injection and Cross-Site Scripting (XSS) attacks. The CSP can also be applied via the iframe's csp attribute.   

Avoid Sensitive Info in URL: It is imperative to ensure that no sensitive information (e.g., user IDs, session tokens, PII) is ever passed directly in the URL of the page loaded within the iframe. All sensitive data transfer will occur exclusively via secure POST requests or robust tokenized mechanisms.   

Credentialless Iframes: The use of the credentialless attribute will be explored where applicable. This attribute prevents the transmission of authentication tokens or cookies with embedded content, providing an additional layer of protection against Cross-Site Request Forgery (CSRF) and XSS attacks.   

Cross-Origin Isolation: Further investigation will be conducted into implementing Cross-Origin-Opener-Policy (COOP) and Cross-Origin-Embedder-Policy (COEP) headers for enhanced isolation. While this requires careful coordination with the embedding merchant's domain, it offers maximum protection against advanced threats.   


The necessity of a layered defense for iframe security in a high-trust Fintech environment is critical. No single attribute provides complete protection. Instead, a combination of sandbox for broad restrictions, allow for granular permissions, X-Frame-Options for clickjacking prevention, and Content-Security-Policy for XSS and data injection is essential. In a Fintech context where user credentials and financial data are handled, a misconfigured iframe could lead to severe security breaches, such as clickjacking to trick users into approving transactions or unauthorized data exfiltration. This multi-layered approach is therefore paramount for maintaining user trust and ensuring regulatory compliance.   

3. User Experience (UX) Design
3.1. Comprehensive User Journey Flow
The user journey for bank account linking is meticulously designed to be intuitive, transparent, and efficient, guiding the user through the process with minimal friction and maximum clarity.

Phase 1: Initiation

Merchant UI: The user initiates the process by clicking a "Payment by Bank" button or a similar Call-to-Action (CTA) prominently displayed on the merchant's checkout or payment page.

Merchant UI (Action): Following the user's action, the merchant's application programmatically launches the Paycorp Account Linking UI within an iframe, seamlessly embedding the experience.

Phase 2: Paycorp Account Linking UI - Onboarding & FI Selection

Welcome/Privacy Screen: The initial screen presented to the user within the iframe is dedicated to building trust and ensuring regulatory compliance. It will clearly articulate what data Paycorp intends to capture, outline its privacy policy, and state the explicit purpose of linking the bank account. A prominent "Continue" button will serve as the primary navigational element, guiding the user forward. This initial screen is a critical moment for establishing user confidence. If users do not immediately understand and feel comfortable with the implications of data sharing, they are highly likely to abandon the process. A well-designed, transparent consent screen directly contributes to higher conversion rates by alleviating user anxiety and fostering confidence in Paycorp's handling of sensitive financial data.   

Financial Institutions Search & Selection Screen: This screen is designed for efficient FI discovery. It will prominently display a curated list of popular financial institutions by default, catering to the majority of users who bank with large institutions and thereby reducing the number of steps required for them. A highly visible search bar will be positioned strategically (e.g., above or below the popular banks list) to invite users to search if their bank is not immediately visible. As the user types, the UI will make real-time calls to the Paycorp Backend (which in turn queries Finicity's    

instructions API ) to fetch and display relevant financial institution suggestions, prioritized by relevance and limited to a manageable number (e.g., up to 10 results). The search query will remain visible in the search bar after results are displayed, allowing users to easily refine their search. A clearly visible "Manual Connect" link will be placed below the search results/popular banks, serving as a crucial fallback for users whose bank is not found, not supported by Finicity's direct integration, or who prefer to enter their account details manually. This design pattern (popular defaults + search + manual fallback) is an excellent UX optimization. It minimizes cognitive load for the majority of users while ensuring a viable path for all others. The real-time autocomplete feature, powered by Finicity's    

instructions API, significantly reduces user effort and potential errors, directly contributing to higher completion rates and user satisfaction by addressing the common problem of user abandonment due to "clunky forms".   

Phase 3: Paycorp Account Linking UI - Authentication

Conditional Flow (Legacy vs. OAuth):

Legacy FI Selected: If the user selects an FI that requires legacy login (username/password), the Paycorp UI will dynamically retrieve the login form structure from the Paycorp Backend (which calls Finicity's /login-forms API). The UI will then render the bank's specific login screen using the Mastercard Connect Components Web SDK's custom elements (<mastercard-form>, <mastercard-input>) directly within the Paycorp UI's iframe. The user will proceed to enter their credentials and handle any Multi-Factor Authentication (MFA) challenges presented by the SDK's components.    

OAuth FI Selected: If the user selects an FI that supports OAuth, the Paycorp UI will receive an OAuth redirect URL from the Paycorp Backend (which calls Finicity's Generate V2 Connect URL API for OAuth). The Paycorp UI will then perform a direct browser redirection to this URL. This will temporarily redirect the user's browser to their bank's official website or mobile application to complete authentication and authorize data sharing. Upon successful authentication and consent, the bank will securely redirect the user back to the Paycorp UI.    

Phase 4: Paycorp Account Linking UI - Account Selection & Confirmation

Account Selection Screen: Following successful authentication (whether via legacy login or OAuth), the Paycorp UI will display a clear and organized list of the user's available accounts (e.g., checking, savings), retrieved securely via Finicity (through the Paycorp Backend). Each entry will present essential details, such as account type, a masked account number (e.g., "****1234"), and potentially the account nickname if provided by the FI. Users will have the flexibility to select individual accounts via checkboxes or radio buttons, with a "Select All" option provided for convenience. A prominent "Submit" or "Link Accounts" button will finalize the user's selection.   

Confirmation/Success Screen: A clear and reassuring confirmation message will be displayed, indicating that the bank account linking process was successful. This screen provides a sense of completion and reinforces user trust.

Phase 5: Completion

Redirect to Merchant: Upon the successful completion of the account linking process, the Paycorp Account Linking UI will gracefully redirect the user's browser back to the original merchant's website, seamlessly completing the overall payment flow.

3.2. Screen 1: Data Capture & Privacy Consent
The initial screen serves a critical dual purpose: to build immediate user trust and to ensure full regulatory compliance by transparently communicating Paycorp's data practices before any sensitive financial information is handled.

UI/UX Considerations:

Clear and Concise Language: All text on this screen will be meticulously crafted in plain, accessible language, deliberately avoiding legal jargon. This ensures that users can easily understand precisely what data is being collected (e.g., account balances, transaction history, contact information ), why it is necessary, and how it will be used and rigorously protected.   

Prominent Privacy Policy: A clearly visible and readily clickable link to Paycorp's comprehensive privacy policy will be provided, allowing users to delve into the details if they choose.

Explicit Consent: A prominent "Continue" button will guide the user forward. Depending on specific regulatory requirements or internal policy, this may be accompanied by an optional checkbox for explicit consent, further solidifying user agreement.

Branding Consistency: The screen will prominently feature Paycorp's branding, including its logo, corporate colors, and consistent typography. This is crucial for maintaining a cohesive and trustworthy experience, even within the embedded iframe.   

3.3. Screen 2: Financial Institutions Search & Selection
This screen is engineered to empower users to quickly and effortlessly locate their financial institution, accommodating both major popular banks and smaller, less common institutions.

Default Display: Popular Banks:

Four popular banks will be prominently displayed by default. This design choice caters to the majority of users who bank with large institutions, significantly reducing the steps required for them to proceed.   

UI Pattern: Each popular bank will be represented by its official logo and name, ensuring immediate recognition and fostering user trust. The design will be clean, visually appealing, and fully consistent with Paycorp's established brand guidelines.   

Search Bar Functionality:

Placement: A highly visible search bar will be strategically positioned, either above or below the popular banks list, serving as an intuitive entry point for users whose bank is not immediately apparent.   

Autocomplete/Suggestions: As the user inputs text, the UI will initiate real-time requests to the Paycorp Backend, which in turn calls Finicity's instructions API. This enables the dynamic display of relevant financial institution suggestions. These suggestions will be intelligently prioritized by relevance, typically showing up to 10 results to maintain clarity and avoid overwhelming the user.   

Clear Keyword Retention: The search query entered by the user will persist in the search bar even after results are displayed. This allows users to easily edit or refine their original query and search again, significantly enhancing the overall user experience and reducing potential abandonment.   

"Last Searches" / "Context-aware defaults": Consideration will be given to implementing features such as "recently searched banks" or "banks near you" (if location data is permissibly available). These features personalize the experience and further accelerate the search process.   

"Manual Connect" Link: A clearly visible "Manual Connect" link will be strategically placed below the search results or popular banks section. This link serves as an essential fallback mechanism for users whose bank is not found, not supported by Finicity's direct integration, or who simply prefer to enter their account details manually.   

UI/UX Best Practices:

Intuitive Navigation: The screen will be designed for effortless navigation, enabling users to quickly locate and select their financial institution.   

Clean and Professional Aesthetic: Strict adherence to a consistent design language will be maintained, employing a sophisticated color scheme (e.g., blues, greens, and grays) to convey trust and reliability—qualities that are paramount for financial institutions.   

Mobile-First Responsive Design: The UI will be fully responsive, guaranteeing optimal display and functionality across a diverse range of screen sizes and devices, with a particular emphasis on smartphones, which represent the primary access point for a significant portion of banking services users.   

3.4. Account Selection Screen
The Account Selection Screen is designed to provide users with a clear and controlled method for choosing which of their financial accounts they wish to link with Paycorp.

UI/UX Considerations:

Clear Account List: Accounts retrieved from Finicity (via the Paycorp Backend) will be presented in a clear, easy-to-read list format. Each entry will prominently display essential details such as the account type (e.g., "Checking," "Savings"), a masked account number (e.g., "****1234"), and potentially the account nickname if provided by the financial institution.   

Selection Mechanism: Users will be empowered to select individual accounts using intuitive checkboxes or radio buttons. For convenience, a "Select All" option will also be provided.   

Confirmation Call to Action: A prominent "Submit" or "Link Accounts" button will serve as the final action, allowing users to confirm their selection and proceed.

Transparency: To maintain user trust, the screen will briefly reiterate the implications of linking the selected accounts, for example, "By linking, you grant Paycorp access to account details and transactions for payment processing".   

3.5. ADA Compliance (WCAG 2.1 Level AA) Implementation Details
Paycorp is deeply committed to building an inclusive online experience, meticulously adhering to Web Content Accessibility Guidelines (WCAG) 2.1 Level AA standards. These guidelines are now widely recognized as the technical benchmark for accessibility compliance. This commitment transcends mere compliance; it aims to empower users with diverse abilities to interact with financial services independently and effectively.   

Core Principles (POUR): The WCAG 2.1 guidelines are organized around four fundamental principles:

Perceivable: Information and user interface components must be presented in ways that users can perceive. This includes providing comprehensive text alternatives for all non-text content (e.g., descriptive alt text for images and icons ), ensuring sufficient color contrast for all text and interactive elements (WCAG 2.1 AA mandates specific contrast ratios ), and enabling users to resize text without any loss of content or functionality.   

Operable: User interface components and navigation must be fully operable by all users. This mandates that all functionality is accessible via keyboard , users are provided with ample time to read and interact with content, flashing elements that could induce seizures are strictly avoided, and clear, consistent navigation is maintained throughout the application. Consideration will also be given to supporting various input modalities beyond the keyboard, such as touch or voice commands, to further enhance usability.   

Understandable: Information and the operation of the user interface must be readily understandable. This involves employing clear, readable language , ensuring that web pages appear and operate in predictable ways with consistent design patterns , and providing robust input assistance, including clear error identification, helpful suggestions for correction, and mechanisms for error prevention.   

Robust: Content must be robust enough to be interpreted reliably by a wide variety of user agents, including assistive technologies. This necessitates ensuring compatibility with current and future user tools by using well-formed HTML and adhering to accessibility-supported technologies.   

Specific Implementation Measures:

Screen Reader Compatibility: All interactive elements (buttons, links, form fields, and dynamic status messages) will be meticulously designed with appropriate ARIA attributes and semantic HTML. This ensures full compatibility with screen readers, enabling visually impaired users to navigate and comprehend the UI effectively.   

Adjustable Text Sizes: The UI will incorporate functionality allowing users to adjust font sizes to accommodate varying visual needs, thereby ensuring comfortable readability of all financial information.   

Element Size: Clickable elements (buttons, links, input fields) will be designed with appropriate dimensions to ensure they are easily interactive, even for users with fine motor skill impairments.   

Flexible Interactions: In scenarios where complex gestures such as dragging are employed, alternative interaction methods (e.g., flyout lists, direct clicks) will be provided to ensure full flexibility and accessibility for all users.   

Consistent Help: Consistent help mechanisms (e.g., easily identifiable help icons, direct links to comprehensive FAQs, or clear contact options) will be uniformly available in the same location across all relevant screens.   

Accessible Authentication: Authentication processes will be designed to minimize reliance on cognitive function tests (e.g., remembering complex, arbitrary passwords) by offering alternative methods like biometric authentication or by providing built-in mechanisms to assist users in completing such tests.   


The requirement for ADA compliance introduces a unique challenge when the Paycorp UI is launched within an iframe. While the Paycorp UI itself must be internally compliant, the embedded nature of the UI introduces additional complexities. For example, managing screen reader focus seamlessly across the iframe boundary, ensuring proper context for assistive technologies (e.g., through the iframe title attribute), and facilitating smooth keyboard navigation between the parent and child frames are non-trivial tasks. This necessitates careful design and rigorous testing to ensure that the embedded nature of the UI does not inadvertently create accessibility barriers, making ADA compliance a system-level integration challenge that extends beyond mere UI design.

4. Mastercard Connect Components Web SDK Integration
The integration of the Mastercard Connect Components Web SDK is a cornerstone of Paycorp's new bank account linking experience, enabling a seamless and robust interaction with Finicity's underlying aggregation capabilities.

4.1. SDK Installation and Initialization in React/TypeScript
The Mastercard Connect Components Web SDK will be incorporated as a standard dependency within the Paycorp React/TypeScript project. This will be achieved using npm: npm install connect-components-web-sdk.   

Initialization: The SDK provides custom web components like <mastercard-form>, <mastercard-input>, <mastercard-mfa-choice>, and <mastercard-event-stream>. These components are registered globally when the SDK script is loaded. The Paycorp UI will dynamically render these custom HTML elements in its React components. For example, a React component will receive the form structure from the Paycorp Backend and then render    

<mastercard-form> with its id and event-stream-id attributes, and nested <mastercard-input> elements with their respective id and label attributes.    

In a React functional component, the rendering of these custom elements will be managed by React's JSX. Event listeners for the custom elements will be attached using standard DOM addEventListener methods within useEffect hooks, ensuring proper cleanup when components unmount.

TypeScript Integration: The SDK provides comprehensive TypeScript type definitions. These definitions will be fully leveraged to ensure strong type checking across the codebase, significantly improving code quality and enhancing developer productivity during the integration process.

4.2. Rendering Legacy Login Forms via SDK
The Mastercard Connect Components Web SDK is specifically engineered to "build login forms for legacy institutions" and to "render Multi-Factor Authorization challenges encountered during legacy institution login" using its custom web components.   

When a user selects a financial institution that is identified as a "legacy" connection type by Finicity (a determination made via the instructions API call), the Paycorp Backend will call the POST /connect-components/institutions/{institution_id}/login-forms API. This API will return a JSON response containing the id (for the form), eventStreamId, and an array of elements (each with an id and label like "username", "password").    

The Paycorp UI will then use this formData to dynamically render the <mastercard-form> and <mastercard-input> custom elements directly within its DOM. The id and eventStreamId from the API response will be set as attributes on the <mastercard-form> element. Each element from the API response will correspond to a <mastercard-input> element, with its id and label attributes set accordingly. The SDK will then take control of rendering the actual input fields within iframes embedded by these custom elements and handling the secure submission of credentials and MFA responses directly to Finicity.    

4.3. Implementing OAuth Redirect Flow
For financial institutions that support OAuth authentication, the Paycorp UI will seamlessly initiate the OAuth redirect flow.

Initiation: When an OAuth-enabled FI is selected by the user, the Paycorp Backend will call the appropriate Finicity API (e.g., Generate V2 Connect URL for OAuth) to obtain the specific redirectUrl for the OAuth flow. This redirectUrl will then be returned to the Paycorp UI.    

Direct Redirection: The Paycorp UI will then perform a direct browser redirection (window.location.href = redirectUrl) to the financial institution's official OAuth authorization page. The user will complete their authentication and grant consent on the bank's own site.    

Redirect URI Configuration: A crucial element in this process is the redirectUrl parameter, which specifies where the financial institution will redirect the user back to the Paycorp UI after successful authentication and consent. This redirectUrl must be pre-registered with Mastercard/Finicity as part of the application setup process.    

Reinitialization & State Management: Upon successful redirection back to the Paycorp UI, the URL will contain an OAuth state ID parameter (e.g., oauth_state_id). The Paycorp React application must be designed to parse this incoming parameter from the URL upon page load and, if necessary, use it to re-establish the session context or re-initialize any relevant SDK components to complete the flow.    

4.4. Detailed SDK Event Handling
The Paycorp UI will implement comprehensive event listeners to capture and respond to all events published by the Mastercard Connect Components Web SDK's custom elements. This is crucial for dynamically updating the UI, managing application state, gracefully handling errors, and accurately tracking user progress throughout the account linking journey.    

Event listeners will be attached to the <mastercard-form> element's events property. The documentation specifies the following key events:    

success: Fired when the connection to the financial institution is successful. The event payload will contain critical success data such as customerId, institutionId, accountId, and institutionLoginId.    

error: Fired when an error occurs during the login process. The event payload will provide detailed error information. The Paycorp UI must be designed to translate these technical error messages into user-friendly language and offer actionable guidance or appropriate fallback options.    

mfaChallenge: Fired when a multi-factor authentication challenge is required. The SDK will render the necessary MFA input fields (e.g., security questions, OTP input) within the <mastercard-mfa-choice> or <mastercard-input> elements. The Paycorp UI will listen for this event to update its state and guide the user through the MFA process.    

5. Diagrams
To provide a comprehensive visual understanding of the system's architecture and interaction flows, the following diagrams are integral to this Solution Design Document.

5.1. Overall Architecture Diagram
The Overall Architecture Diagram illustrates the high-level components of the Paycorp Bank Account Linking system and their interconnections.

Actors/Systems:

User: The end-user initiating the bank account linking process.

Merchant UI: The external web application embedding the Paycorp UI.

Paycorp Account Linking UI (Frontend): The React/TypeScript application hosted by Paycorp.

Paycorp Backend Services: Paycorp's server-side API gateway and orchestration layer.

Mastercard/Finicity APIs: External Finicity endpoints for authentication, institution data, login form data, and OAuth redirect URLs.

Mastercard Connect Components Web SDK (Custom Elements): The embedded custom HTML elements (<mastercard-form>, <mastercard-input>, etc.) within the Paycorp UI.

Financial Institution (FI) OAuth/Legacy Systems: The bank's authentication systems.

Paycorp Database: Secure storage for non-sensitive linked account metadata and audit logs.

Key Interactions:

The User interacts with the Merchant UI.

The Merchant UI embeds the Paycorp Account Linking UI via an iframe.

The Paycorp Account Linking UI communicates with the Paycorp Backend Services for API calls to Finicity.

The Paycorp Backend Services authenticate with and call Mastercard/Finicity APIs.

The Mastercard Connect Components Web SDK's custom elements, rendered in the Paycorp UI, interact with the User for legacy forms.

For OAuth, the Paycorp UI directly redirects the User to FI OAuth systems.

FI OAuth systems redirect back to the Paycorp Account Linking UI.

Paycorp Backend Services store linked account metadata in the Paycorp Database.

5.2. Full Experience Sequence Diagram
This sequence diagram details the complete end-to-end user journey for bank account linking, from initiation to completion, encompassing all conditional flows.

Lifelines: User, Merchant UI, Paycorp Account Linking UI, Paycorp Backend Services, Mastercard/Finicity APIs, Mastercard Connect Components Web SDK (Custom Elements), Financial Institution (FI) Systems.

Flow:

User clicks "Payment by Bank" on Merchant UI.

Merchant UI launches Paycorp Account Linking UI in iframe.

Paycorp Account Linking UI displays Welcome/Privacy screen.

User clicks "Continue".

Paycorp Account Linking UI displays FI Search screen (popular banks).

User searches for FI (optional).

Paycorp Account Linking UI requests FI list from Paycorp Backend Services.

Paycorp Backend Services requests FI list from Mastercard/Finicity APIs (instructions API).

Mastercard/Finicity APIs return FI list to Paycorp Backend Services.

Paycorp Backend Services return FI list to Paycorp Account Linking UI.

User selects FI.

Optional Fragment (Manual Connect):

User clicks "Manual Connect".

Paycorp Account Linking UI displays Manual Connect form (Account Number, Routing Number).

User enters details and selects Instant Connect or Micro Deposit.

Paycorp Account Linking UI sends details to Paycorp Backend Services.

Paycorp Backend Services processes manual linking (e.g., initiates micro-deposits, calls relevant Finicity APIs for instant connect).

Paycorp Backend Services confirms linking status.

Paycorp Account Linking UI displays success/pending.

Alternative Fragment (Legacy vs. OAuth FI):

Option 1: Legacy FI Selected:

Paycorp Account Linking UI requests login form data from Paycorp Backend Services.

Paycorp Backend Services requests login form data from Mastercard/Finicity APIs (POST /connect-components/institutions/{institution_id}/login-forms).    

Mastercard/Finicity APIs return login form data (id, eventStreamId, elements) to Paycorp Backend Services.    

Paycorp Backend Services returns login form data to Paycorp Account Linking UI.

Paycorp Account Linking UI renders <mastercard-form> and <mastercard-input> custom elements based on received data.    

User enters credentials into rendered form.

User clicks submit button on <mastercard-form>.

Mastercard Connect Components Web SDK (Custom Elements) handles submission and communication with Mastercard/Finicity APIs.    

Loop Fragment (MFA Challenge):

Mastercard Connect Components Web SDK (Custom Elements) presents MFA challenge (e.g., via <mastercard-mfa-choice>).

Paycorp Account Linking UI listens for mfaChallenge event from SDK.    

User submits MFA response.

Mastercard Connect Components Web SDK (Custom Elements) processes MFA.

(Loop continues until MFA successful or failed attempts exceeded).

Mastercard Connect Components Web SDK (Custom Elements) signals successful login (success event).    

Option 2: OAuth FI Selected:

Paycorp Account Linking UI requests OAuth redirect URL from Paycorp Backend Services.

Paycorp Backend Services requests OAuth redirect URL from Mastercard/Finicity APIs (Generate V2 Connect URL for OAuth).    

Mastercard/Finicity APIs return OAuth redirect URL to Paycorp Backend Services.

Paycorp Backend Services returns OAuth redirect URL to Paycorp Account Linking UI.

Paycorp Account Linking UI performs direct browser redirect to Financial Institution (FI) Systems for OAuth.    

User authenticates and authorizes on FI Systems.

FI Systems redirect User back to Paycorp Account Linking UI (with oauth_state_id).    

Paycorp Account Linking UI parses oauth_state_id and resumes flow.

Paycorp Account Linking UI signals successful OAuth completion (internal state update).

Paycorp Account Linking UI requests linked accounts from Paycorp Backend Services.

Paycorp Backend Services retrieves linked accounts from Mastercard/Finicity APIs.

Mastercard/Finicity APIs return account list to Paycorp Backend Services.

Paycorp Backend Services returns account list to Paycorp Account Linking UI.

Paycorp Account Linking UI displays Account Selection screen.

User selects accounts and clicks "Submit".

Paycorp Account Linking UI confirms account linking with Paycorp Backend Services.

Paycorp Backend Services processes account linking and stores metadata in Paycorp Database.

Paycorp Backend Services confirms success to Paycorp Account Linking UI.

Paycorp Account Linking UI displays Confirmation/Success screen.

Paycorp Account Linking UI redirects User back to Merchant UI.

5.3. Legacy Login Sequence Diagram
This diagram focuses specifically on the flow when a user selects a financial institution requiring legacy (credential-based) login.

Lifelines: User, Paycorp Account Linking UI, Paycorp Backend Services, Mastercard/Finicity APIs, Mastercard Connect Components Web SDK (Custom Elements).

Flow:

User selects a Legacy FI on Paycorp Account Linking UI.

Paycorp Account Linking UI sends selected FI details to Paycorp Backend Services.

Paycorp Backend Services requests login form data from Mastercard/Finicity APIs (POST /connect-components/institutions/{institution_id}/login-forms).    

Mastercard/Finicity APIs return login form data (id, eventStreamId, elements) to Paycorp Backend Services.    

Paycorp Backend Services returns login form data to Paycorp Account Linking UI.

Paycorp Account Linking UI renders <mastercard-form> and <mastercard-input> custom elements based on the received data.    

User enters username and password into the rendered form.

User clicks submit button on <mastercard-form>.

Mastercard Connect Components Web SDK (Custom Elements) calls submit() on <mastercard-form>.    

Mastercard Connect Components Web SDK (Custom Elements) sends credentials to Mastercard/Finicity APIs.    

Loop Fragment (MFA Challenge):

Mastercard/Finicity APIs respond with MFA challenge.

Mastercard Connect Components Web SDK (Custom Elements) receives MFA challenge and renders MFA input fields (e.g., via <mastercard-mfa-choice>).

Paycorp Account Linking UI listens for mfaChallenge event from SDK.    

User provides MFA response.

Mastercard Connect Components Web SDK (Custom Elements) captures MFA response and sends it to Mastercard/Finicity APIs.

(Loop continues until MFA is successfully completed or maximum attempts are reached).

Mastercard/Finicity APIs confirm successful login.

Mastercard Connect Components Web SDK (Custom Elements) emits success event to Paycorp Account Linking UI, indicating successful authentication.    

Paycorp Account Linking UI proceeds to account selection.

5.4. OAuth Login Experience Sequence Diagram
This diagram details the OAuth-based login flow, emphasizing the redirection to the financial institution's native environment.

Lifelines: User, Paycorp Account Linking UI, Paycorp Backend Services, Mastercard/Finicity APIs, Financial Institution (FI) OAuth System.

Flow:

User selects an OAuth-enabled FI on Paycorp Account Linking UI.

Paycorp Account Linking UI sends selected FI details to Paycorp Backend Services.

Paycorp Backend Services requests OAuth redirect URL from Mastercard/Finicity APIs (Generate V2 Connect URL for OAuth).    

Mastercard/Finicity APIs return the OAuth redirectUrl to Paycorp Backend Services.

Paycorp Backend Services returns OAuth redirectUrl to Paycorp Account Linking UI.

Paycorp Account Linking UI performs direct browser redirect to Financial Institution (FI) OAuth System (external browser/app).    

User authenticates and grants data access consent on FI OAuth System.

FI OAuth System redirects User back to Paycorp Account Linking UI's configured redirectUrl (including oauth_state_id query parameter).    

Paycorp Account Linking UI detects redirection and parses oauth_state_id.

Paycorp Account Linking UI resumes the OAuth flow using the oauth_state_id (e.g., by making a backend call to exchange the code for a token).

Paycorp Account Linking UI signals successful OAuth completion (internal state update).

6. Conclusions and Recommendations
The design of Paycorp's new bank account linking UI experience represents a significant strategic evolution, moving from a fully managed third-party solution to an in-house, custom-hosted approach. This shift provides Paycorp with unprecedented control over the user journey, brand consistency, and the ability to rapidly innovate and adapt to market demands.

The successful implementation of this solution hinges on several critical factors:

Robust Backend Orchestration: The Paycorp Backend Services are not merely a proxy; they are the secure and intelligent hub for all Finicity API interactions. Proactive token management, stringent API security measures (including rate limiting, input validation, and secrets management), and comprehensive logging are essential to ensure uninterrupted service and protect sensitive data. The design explicitly addresses the need to manage Finicity's token lifecycle proactively to prevent user flow interruptions, which is a common pitfall in such integrations.

Seamless Frontend-SDK Integration: The integration of the Mastercard Connect Components Web SDK's custom elements within the React/TypeScript UI is vital. Proper DOM management and event listener attachment for <mastercard-form> and <mastercard-input> are crucial for application stability and performance. The SDK's capability to abstract the complexities of diverse legacy login forms and MFA challenges is a key enabler, allowing Paycorp to focus on its core business logic.

User-Centric Design with Accessibility at its Core: The multi-step user journey, from privacy consent to FI selection and account linking, is designed for clarity and ease of use. The combination of popular bank defaults, a robust search functionality with autocomplete, and a manual connect fallback ensures broad user coverage and reduces friction. Critically, the commitment to WCAG 2.1 Level AA compliance is fundamental. This extends beyond basic UI elements to addressing the unique accessibility challenges posed by an embedded iframe environment, such as screen reader focus and keyboard navigation across frame boundaries. This holistic approach to accessibility is not just a regulatory requirement but a foundational element for building trust and maximizing user adoption.

Comprehensive Error Handling and User Feedback: The design emphasizes detailed SDK event handling, particularly for errors. Translating technical error messages into user-friendly guidance and providing clear fallback options is paramount to maintain user confidence and minimize abandonment rates.

Recommendations:

Prioritize Backend Security Implementation: Before any frontend development begins, ensure the Paycorp Backend Services are fully designed and secured, with all Finicity API key management, token refresh logic, and data encryption protocols thoroughly implemented and tested. This foundational layer is non-negotiable for data integrity and system resilience.

Conduct Rigorous Accessibility Testing: Beyond standard WCAG audits, perform extensive user testing with individuals using various assistive technologies. Special attention should be given to the interaction between the parent Merchant UI and the embedded Paycorp iframe to identify and resolve any accessibility barriers introduced by the embedding context.

Phased Rollout and A/B Testing: Consider a phased rollout of the new UI, perhaps to a limited user segment, to gather real-world performance data and user feedback. A/B testing different UI elements or flow variations could further optimize conversion rates and user satisfaction.

Continuous Monitoring and Iteration: Implement robust real-time monitoring for API performance, error rates, and user flow analytics from day one. Establish a feedback loop with user support teams to capture common pain points and continuously iterate on the UI/UX based on data and user feedback.

Documentation and Training: Develop comprehensive internal documentation for the new system, covering architecture, API contracts, SDK integration, and operational procedures. Provide thorough training for development, QA, and support teams to ensure a deep understanding of the new system and its intricacies.

By meticulously executing this solution design, Paycorp is poised to deliver a superior, secure, and accessible bank account linking experience, reinforcing its position as a trusted Fintech innovator.
